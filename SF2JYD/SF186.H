
/* PFONT0.C */
//english bitmap buffer pointer int HCode2Bitmap ( unsigned char f , unsigned char m , unsigned char l , int bitmap [16 ]);
int loadFont(char *fn);
void fPText(unsigned int x, unsigned int y, unsigned char str[], unsigned char mode, unsigned char fc, unsigned char bc);
void fPLargeECh(unsigned int x, unsigned int y, int xt, int yt, unsigned int ch, Sprite *FC, Sprite *BC, Image *IMG);

/* SF186.c */
int systemCheck(void);
int isVga256K(void);
int mem520KFree(void);
int textLogo(void);
int systemWakeUp(void);
int loadFileConfig(char fn[]);
int setInitialValue(GameENV *ENV, PLAYER *LP, PLAYER *RP);
int viewWarn(void);
int demo(GameENV *GENV, PLAYER *LP, PLAYER *RP);
int loadDemoResource(char info[][80]);
int demo1(void);
int meetChar(Sprite *Spr, char info[][80]);
int gameSelect(GameENV *ENV, PLAYER *LP, PLAYER *RP);
int setOption(GameENV *ENV, PLAYER *LP, PLAYER *RP);
int macroEnv(unsigned int L, unsigned int R, int *v, int l, int u, int i);
int drawOpt(void);
int select(GameENV *GENV, PLAYER *LP, PLAYER *RP);
int loadSelectResource(GameENV *ENV);
int selectMode(GameENV *ENV, PLAYER *LP, PLAYER *RP);
int selectCtrl(GameENV *ENV, PLAYER *PL, int *x, int *y);
int moveAirplane(int x1, int y1, int x2, int y2, int p);
int vsScreen(PLAYER *LP, PLAYER *RP);
int game(GameENV *GENV, PLAYER *LP, PLAYER *RP);
int drawWinner(GameENV *ENV, PLAYER *LP, PLAYER *RP);
int drawLoser(int pl);
int loadGameResource(GameENV *ENV, PLAYER *LP, PLAYER *RP);
int convertCharacterColor(Image Img[], int n);
int ConvertImageColor(unsigned char *s, int l, unsigned char lookup[]);
int loadBkimg(char *fn, unsigned int xs, unsigned int ys2);
int playGame(GameENV *ENV, PLAYER *LP, PLAYER *RP);
int newPlayerComeIn(PLAYER *PL);
int startScene(PLAYER *LP, PLAYER *RP, GameENV *ENV, int off, int moff, int bks, int t);
int endScene(PLAYER *LP, PLAYER *RP, int off, int moff, int bks, int t, int p);
int viewInfo(PLAYER *LP, PLAYER *RP);
int initPlayer(PLAYER *P, int x, int y, int mirr);
int setPostition(PLAYER *LP, PLAYER *RP, int *off, int moff);
int creatTempAction(PLAYER *RP);
int pullControl(int *xl, int *xr, int off, int moff);
int setWinnerOrLoserAction(PLAYER *PL, PLAYER *PR);
int setTempPosition(PLAYER *LP);
int is2568Action(PLAYER *LP, PLAYER *RP);
int drawBackground(int scr, int off, int xs);
int drawActor(PLAYER *LP, PLAYER *RP, int scr);
int drawTempActor(PLAYER *PL);
int drawScoreBoard(PLAYER *LP, PLAYER *RP, int t);
int setPlayerActor(PLAYER *PL, int ann, int ani, int *ar, unsigned int *i);
int setNextAction(PLAYER *MP, PLAYER *EP);
int damageCheck(PLAYER *MP, PLAYER *EP);
int waveDamageCheck(PLAYER *MP, PLAYER *EP);
int setDamageAction(PLAYER *MP, PLAYER *EP, int da, int power, int flag);
int isOverLap(PLAYER *MP, int sL, int xl0, int yl0, int lm, PLAYER *EP, int sR, int xr0, int yr0, int rm);
int specialAttack(PLAYER *PL);
int getSpecialCode(KEYRULE *KR, KEYBUFF *KB, int ctrl, int san);
int patternMatch(char *str1, char *str2);
int combAttack(PLAYER *MP, PLAYER *EP);
int normalAttack(PLAYER *MP, PLAYER *EP);
int replaceAction(PLAYER *PL, int ac, int ann, int ani, int mask);
int getIndex(PLAYER *PL);
int getAttackCode(CTRLKEY *K, int ctrl);
int movePlayer(PLAYER *PL, PLAYER *EP);
int setAction(PLAYER *PL, int act);
int getMoveCode(CTRLKEY *K, int mirr, int ctrl);
int loadAttackRule(char fn[], int *nr, KEYRULE *PKR, COMBRULE *PCR, PLAYER *PL);
int loadSeq(char fn[], ACTION *AN, ACTOR *AR);
int field(char ch, char str[], unsigned int *f);
void fadeIn(void);
void fadeOut(void);
int cError(char ms1[], char ms2[], int m);
void systemDown(void);

/* PGRKER0.C */
//보이는 창의 구석좌표 값 //( int _XL , int _YL );
int vgaTextMode(void);
void setStAdd(unsigned int st);
void actPage(int p);
void planeMode(void);
void writeMode(unsigned char mode);
void pBox2(int x1, int y1, int x2, int y2, int c);
void pBoxL(int x, int y, int xl, int yl, int c);
void pPutImgMode(int x, int y, unsigned char far *p, int xs, int ys, int m);
void pCTrpRImg0(int x, int y, unsigned char far *p, int xs, int ys);
void pCTrpRImg1(int x, int y, unsigned char far *p, int xs, int ys);
void pCTrpRImg2(int x, int y, unsigned char far *p, int xs, int ys);
void pCTrpRImg3(int x, int y, unsigned char far *p, int xs, int ys);
void pImgCpLU(unsigned int sseg, unsigned int soff, unsigned int scs, unsigned int xs, unsigned int ys, unsigned int dseg, unsigned int doff, unsigned int dcs);
void pSprCp(unsigned int sseg, unsigned int soff, unsigned int scs, unsigned int xs, unsigned int ys, unsigned int dseg, unsigned int doff, unsigned int dcs);
void pSprCpUD(unsigned int sseg, unsigned int soff, unsigned int scs, unsigned int xs, unsigned int ys, unsigned int dseg, unsigned int doff, unsigned int dcs);
void pSprCpMir(unsigned int sseg, unsigned int soff, unsigned int scs, unsigned int xs, unsigned int ys, unsigned int dseg, unsigned int doff, unsigned int dcs);
void pSprCpMirUD(unsigned int sseg, unsigned int soff, unsigned int scs, unsigned int xs, unsigned int ys, unsigned int dseg, unsigned int doff, unsigned int dcs);
void imgHFill(unsigned int seg, unsigned int off, unsigned int xs, unsigned int color);
void pImgVFill(unsigned int seg, unsigned int off, unsigned int scs, unsigned int ys, unsigned int color);
void pBytePut(unsigned int seg, unsigned int off, unsigned int color);
void pImgHFill(unsigned int seg, unsigned int x1, unsigned int x2, unsigned int color);
void pImgFill(unsigned int seg, unsigned int x1, int scs, unsigned int x2, int ys, unsigned int color);
void pBitImgCp(unsigned int sseg, unsigned int soff, unsigned int scs, unsigned int ys, unsigned int dseg, unsigned int doff, unsigned int dcs, unsigned int color);
void fPBitImgCp(unsigned int sseg, unsigned int soff, unsigned int scs, unsigned int ys, unsigned int dseg, unsigned int doff, unsigned int dcs, unsigned int color);
void get1DACR(unsigned int i, unsigned char *r, unsigned char *g, unsigned char *b);
void getNDACR(unsigned int s, int n, unsigned char *r, unsigned char *g, unsigned char *b);
void set1DACR(unsigned int i, unsigned int r, unsigned int g, unsigned int b);
void setNDACR(unsigned int s, int n, unsigned char *r, unsigned char *g, unsigned char *b);
void brightCtrl(unsigned int s, int n, unsigned char *r, unsigned char *g, unsigned char *b, int factor);
void greyCtrl(unsigned int s, int n, unsigned char *r, unsigned char *g, unsigned char *b, int factor);
void setRGBPalette(void);
void asmDecode(unsigned char far *s, unsigned char far *d, unsigned int l);
int vga320Mode(void);

/* SF2ADL.c */
#define UCHAR unsigned char

void Volume_OnOff(int flag);
void Midi_Init(void);
int Midi_Play(UCHAR *dataPtr);
void Midi_End(void);
int static unsigned Get_Word(UCHAR *ptr);
static long Get_Long(UCHAR *ptr);
static void SetUp_Tracks(int trcks, UCHAR *chunk);
static long Get_Length(void);
static void SetUp_Data(UCHAR *dataPtr);
static void Start_Melo(void);
void Stop_Melo(void);
void Set_Original_Clock(void);
void Set_Tempo(unsigned tickQnote, long usec);
static unsigned Get_Next_Delay(void);
static void myNoteOn(int voice, int note, int volume);
static void Midi_Event(unsigned event);
static void AdLib_Specific(int code, unsigned char *data);
static void Meta_Event(void);
static void Sysex_Event(UCHAR event);
unsigned TimeOut(void);
static unsigned Do_Event(void);
unsigned TimeOut(void);
static unsigned Do_Event(void);
int Test_Event(void);
int SoundColdInit(unsigned port);
int SoundWarmInit(void);
int SetMode(int mode);
int SetWaveSel(int state);
int SetPitchRange(unsigned pR);
int SetGParam(int amD, int vibD, int nSel);
int SetVoiceTimbre(unsigned voice, unsigned *paramArray);
int SetVoiceVolume(unsigned voice, unsigned volume);
int SetVoicePitch(unsigned voice, unsigned pitchBend);
int NoteOn(unsigned voice, int pitch);
int NoteOff(unsigned voice);
static InitSlotParams(void);
int SetASlotParam(int slot, int param, int val);
static SetSlotParam(unsigned slot, unsigned *param, unsigned waveSel);
int SetCharSlotParam(unsigned slot, unsigned char *cParam, unsigned waveSel);
static SndSetPrm(int slot, int prm);
static SndSetAllPrm(int slot);
static SndSKslLevel(int slot);
static SndSNoteSel(void);
static SndSFeedFm(int slot);
static SndSAttDecay(int slot);
static SndSSusRelease(int slot);
static SndSAVEK(int slot);
static SndSAmVibRhythm(void);
static SndWaveSelect(int slot);
static UpdateFNums(int voice);
static int BoardInstalled(void);
unsigned OutFreq(int voice, int pitch, int bend, int keyOn);
int playMusic(char *fn);
void offMusic(void);

/* PSPRKER0.C */
//encoding data temporary save buffer void initImg ( Image img [], int n );
void freeImg(Image img[], int n);
int loadImgSpr(char IdFn[], Image img[], Sprite spr[], int flag);
void pPutRLESprMode(int x, int y, Sprite *spr, Image *img, int m);
void pPutSprMode(int x, int y, Sprite *spr, Image *img, int m);
void pCTrpSpr0(int x, int y, Sprite *spr, Image *img);
void pCTrpSpr1(int x, int y, Sprite *spr, Image *img);
void pCTrpSpr2(int x, int y, Sprite *spr, Image *img);
void pCTrpSpr3(int x, int y, Sprite *spr, Image *img);
void initImg(Image img[], int n);

int silentVoice(void);
int sayVoice(unsigned char fn[]);
void allocVoiceMem(void);
int silentVoice(void);