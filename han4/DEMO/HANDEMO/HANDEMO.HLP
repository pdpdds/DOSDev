<한> 은 터보 C 로 만든 프로그램에 한글을 내장할 수 있도록 해 주는 터
보 C 용 한글 라이브러리입니다. <한> 은 다음과 같은 특징을 갖고  있습
니다. <한> 의 메뉴얼은 화일로도 제공되지만 풍부한 예제  프로그램(130
여개)과 완벽한 메뉴얼을 원하신다면 가남사에서 출판된 "터보 C  프로그
래머를 위한 한글 라이브러리 <한>"을 구해 보시기 바랍니다.

다음은 <한> 4.1 의 특징입니다.

1. HGC/EGA/VGA 지원

<한> 을 사용하면 HGC 용 프로그램은 물론 EGA/VGA  용 프로그램도  만들
수 있습니다. EGA/VGA 의 경우 전경색과 배경색으로 각각 16 색을 사용할
수 있기 때문에 예쁜 화면을 구성할 수 있습니다. 

2. 그래픽카드 자동 판별

현재 사용 중인 그래픽카드의 종류를 자동 판별하여 출력하므로 프로그래
머가 일일이 카드의 종류에 따라서 라이브러리화일이나 입출력함수를  바
꾸어 줄 필요가 없습니다. EGA/VGA 용으로 작성된 프로그램이라도 HGC 에
서 아무런 문제없이 작동되고 반대로 해도 됩니다. 따라서  프로그래머는
그래픽카드의 종류에 구애받지 않고 자유로이 프로그램을 짤  수  있습니
다.

3. KS 완성형, 7 비트 완성형, 2 바이트 조합형 한글코드 지원

우리나라의 표준 한글코드인 KS C 5601 코드(KS 완성형)와 준표준 한글코
드라고 할 수 있는 2 바이트 조합형(일명 삼보조합형) 한글코드를 사용할
수 있습니다. 표준은 아니지만 과거에 워낙 많이 사용되었기 때문에 7 비
트 완성형(일명 청계천한글) 한글코드도 사용할 수  있도록  하였습니다.
따라서 어떤 한글 화일이든지 이 세 가지 코드 중의 어느 하나로  작성되
었다면 자유로이 읽을 수 있습니다. 물론 이 코드대로  출력도  가능합니
다.

4. 2 벌식과 3 벌식 자판 지원

한글을 입력할 때 사용하는 자판의 종류는 몇 가지가 있는데 <한> 은  이
중 가장 널리 쓰이고 있는 2 벌식 자판과 3 벌식 자판(390 자판)을  지원
합니다. set_keyboard_type() 이라는 함수를 사용하면 자판을 간단히  전
환할 수 있습니다.

5. 한자 사용 가능

4888 자의 한자를 사용할 수 있습니다. <한> 의 모든 출력함수들(영문 전
용 함수 제외)이 자동으로 한자를 판별하여 출력해 주므로 한글과 마찬가
지로 편리하게 한자를 출력할 수 있습니다. 또한 한자를  아래아  한글과
같은 방식으로 입력할 수 있는 함수도 제공하고 있어 사용자로부터  한자
를 입력받을 수도 있습니다.

6. 글자 확대 가능, 다양한 모양의 글자 출력 가능

아래아 한글에서 볼 수 있는 다양한 모양의 글자를 출력할 수  있습니다.
외곽선, 그림자, 음영, 역상, 밑줄, 굵은체, 가로확대, 세로확대 등 모두
8 가지의 속성을 제공하는데 서로 조합할 수 있으므로 실제 출력  가능한
글자 모양은 모두 2^8 = 256 가지입니다.

7. 다양한 폰트 사용 가능
폰트는 외부 화일로부터 읽어 들이기 때문에 폰트화일만 준비되어 있다면
어떠한 모양의 폰트라도 사용할 수 있습니다. 현재, <한> 4.1 은 12 가지
의 폰트를 제공하는데 아래아 한글의 FED 와 같은 폰트에디터를 이용하면
폰트를 수정할 수도 있고 새로 만들 수도 있습니다. <한> 의 데모용 프로
그램인 handemo.exe 를 돌려 보면 다양한 폰트를 사용하는 장면을 볼  수
있습니다. 폰트는 프로그램 실행 중에 디스크에서 읽어서 바꿀  수도  있
고, 빠른 출력 속도가 필요하다면 미리 메모리에 읽어 놓고 바꿀 수도 있
습니다.

8. 막강한 기능의 입력함수 adv_gets_han() 제공

이 함수는 워드스타(Wordstar)류의 편집키들을 입력시에 사용할 수  있도
록 해 주는 문자열 입력함수입니다. 일반적인 워드프로세서에서 사용되는
편집키들을 대부분 사용할 수 있기 때문에 <BS> 와 <Enter> 만 사용할 수
있는 터보 C 의 gets(), scanf() 와 같은 함수보다 사용하기가 월등히 편
리합니다. 또한 사용자정의 탈출키도 처리할 수 있기 때문에  프로그래밍
에 많은 유연성을 제공합니다. 제법 괜찮은 프로그램을 만들려고 할 때는
절대적으로 필요한 함수입니다.

사용되는 편집키

 1. <Left>                 : 한 문자 좌측으로 이동
 2. <Right>                : 한 문자 우측으로 이동
 3. <Ctrl>+<Left>          : 한 단어 좌측으로 이동
 4. <Ctrl>+<Right>         : 한 단어 우측으로 이동
 5. <Home>                 : 문자열의 제일 앞으로 이동
 6. <End>                  : 문자열의 제일 끝으로 이동
 7. <Ins>                  : 삽입/수정 모드 전환
 8. <Ctrl>+<T>             : 오른쪽 단어 삭제
 9. <Ctrl>+<Y>             : 라인 전체 삭제
10. <Ctrl>+<Q>+<Y>         : 현재 커서 위치부터 라인 끝까지 삭제
11. <Del>, <BS>            : 한 개의 글자 삭제

9. 윈도우 지원

전문가용 함수를 제외한 모든 입출력함수들은  윈도우내에서  작동하도록
설계되었기 때문에 무리 없이 윈도우를 처리할 수 있습니다. 터보  C  의
setwindow() 와 비슷한 기능을 갖는 set_window_han() 을 사용하면  윈도
우를 설정할 수 있습니다.

10. 팝업/풀다운 메뉴 함수 제공

간단하게 팝업 메뉴와 풀다운 메뉴를 만들어 주는 함수를 제공합니다. 메
뉴의 구조를 이 함수들의 인자로 넘겨 주기만 하면 자동으로 메뉴가 구성
되기 때문에 구현 원리를 전혀 몰라도 멋진 메뉴를 구성할 수 있습니다.

11. 빠른 출력 속도

<한> 은 터보 C 로 만들어진 라이브러리이지만 빠른 속도가 요구되는  출
력루틴들은 100 퍼센트 인라인 어셈블리(inline assembly)로  작성하였고
속도를 최우선으로 하는 프로그래밍 기법을 사용하였기 때문에 출력 속도
가 빠릅니다. 특히 EGA/VGA 에서는 독특한  출력  알고리즘(algorithm)을
채택하고 있어서 16 색을 사용하더라도 빠른 속도로 출력됩니다. <한> 의
가장 큰 자랑거리가 바로 빠른 출력 속도입니다.

12. 다양한 입출력함수
프로그램을 만들다 보면 화면을 이곳 저곳 옮겨 다니거나 색을 바꾸어 가
면서 입출력을 처리해야 할 경우가 참 많습니다. 터보 C  는  이를  위해
gotoxy(), textcolor(), textbackground() 함수를 제공해 주지만  좌표를
이동하거나 색을 바꿀 때마다 일일이 이러한 함수를 호출한다는 것은  여
간 번거로운 일이 아닙니다.

<한> 은 초보자를 위해 터보 C 의 함수와 사용법이 동일한 함수들을 제공
함은 물론, 전문적인 프로그래머를 위해 입출력을 다양하게 제어할 수 있
는 <한> 고유의 함수들도 제공합니다. 문자열 출력함수를 예로 들면 좌표
지정 출력함수, 문자수 지정 출력함수, 속성 지정 출력함수, 그리고 이들
의 조합형 출력함수 등 다양한 함수들이 준비되어 있어 간편하게  출력을
제어할 수 있습니다. 또한 아래아 한글에서 볼 수 있는 문단정렬  기능을
갖고 있는 출력함수도 제공하므로 깔끔하게 문장을 출력할 수 있습니다.

13. 스크린버퍼 사용

<한> 은 그래픽으로 화면을 처리하지만 입출력 형식은 터보 C 의  텍스트
용 입출력함수에 기초를 두고 있습니다. 이를 위해 <한> 은 텍스트의  형
태로 현재 화면의 내용을 저장하고 있는 스크린버퍼(screen buffer)를 갖
고 있는데 스크린버퍼를 사용할 때의 장점 중 하나는 화면을 저장하는 데
필요한 메모리를 엄청나게 절약할 수 있다는 것입니다. 

화면을 그래픽 이미지(graphics image)의 형식으로 저장하는 방식을 사용
하면 VGA 640x480 16 색  모드에서  한  화면  전체를  저장할  때  무려
150KB(640x480x4/8 Bytes)라는 엄청난 메모리가 소요되기 때문에  윈도우
를 많이 열기 위해서는 하드 디스크나 확장  메모리(Expanded  Memory)에
화면을 저장해야 합니다. 처리 속도라든지 프로그램의 범용성을 고려하면
이러한 방식은 별로 좋은 것이 못 됩니다.
하지만 <한> 은 스크린버퍼의 내용만 저장하기 때문에 그래픽카드의 종류
에 관계없이 한 화면 전체를 저장하는 데 9.4 KB(80x30x4 Bytes)  이하만
소요됩니다. 1/16 밖에 안 되는 메모리만 있으면 되기 때문에 충분히  주
메모리에 화면을 저장할 수 있어 프로그래밍이 편리합니다. 프로그램의실
행시에 400 KB 의 메모리가 남는다고 가정하면 <한> 으로 만든  프로그램
은 42 개의 화면을 저장할 수 있는 반면 그래픽 이미지를 저장하는  프로
그램은 겨우 2 개의 화면만 저장할 수 있을 뿐입니다. 

14. 음악 연주 함수 제공

베이직(BASIC) 언어에 있는 음악 연주 명령 play 와 거의 대부분  호환성
이 있는 음악 연주 함수 play() 를 제공합니다. 이 함수를 사용하면 프로
그램 실행 중 사용자에게 경고할 때 '삑'하는 불쾌한 음을 이용할 필요없
이 듣기 좋은 멜로디를 들려 줄 수도 있습니다. 또한 주파수에 변화를 주
면서 음악을 연주하는 기능도 있기 때문에 게임에서 들을 수 있는 효과도
낼 수 있습니다.

15. 오랜 시험에 의한 안정성과 편리함

아무리 뛰어난 기능을 가진 라이브러리라도 버그가 많다든지  사용하기가
불편하다면 누구도 사용하지 않으려고 할 것입니다. <한> 은 1990년 12월
에 1.0 판이 만들어진 이후 케텔(KETEL, 현재는 코텔)을  통해  공개되어
많은 사람들의 시험을 거쳤기 때문에 안정성이 높습니다. 적어도 <한> 자
체의 문제 때문에 컴퓨터가 정지하는 따위의 일은 없습니다.

16. 기타

이 외에도 메뉴얼을 보면 아시겠지만 다양한 모양의 박스, 커서 등을  제
공하고 한/영 전환키 지정, 한/영 전환 금지 및 허용, 입력 대기 시간 동
안 실행되는 함수 지정 등 <한> 의 작동 방식을 프로그래머의 입맛에  맞
도록 고칠 수 있는 함수들이 제공됩니다. <한> 4.1 에서 제공되는 160 가
지의 막강하고 편리한 함수들이 독자 여러분들을 정다운 한글의 세계로안
내할 것입니다.


                               1992 년 6 월 30 일 새벽 밤을 새면서..

